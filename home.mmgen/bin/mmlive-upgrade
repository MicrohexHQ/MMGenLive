#!/bin/bash

# R8 = remove in version 0.0.8

set -e

[ "$EUID" == 0 ] && { echo 'This script must be run as user, not as root'; exit 1; }
[ "$1" == '--reexec' ] && { shift; REEXEC=1; }

PROGNAME=$(basename $0)
CURL='curl -s -L'
PRIVOXY='http://localhost:8118'
PROJ_NAME='MMLiveUpgrade'
ONLINE=1
CURL='curl' GIT='git' APT_GET='sudo apt-get --yes' LYNX='lynx'
BUILD_SYSTEM='sudo ./build_system.sh'
PIP='sudo -H pip'
REPO_ROOT='/setup/git/MMGenLive'

declare -A REPOS=(
	[sys]='/setup/git/MMGenLive           https://github.com/mmgen/MMGenLive.git'
	[mmgen_wiki]='/setup/git/mmgen-wiki   https://github.com/mmgen/mmgen.wiki.git'
	[mmlive_wiki]='/setup/git/mmlive-wiki https://github.com/mmgen/MMGenLive.wiki.git'
	[tools]='/setup/git/node-tools        https://github.com/mmgen/mmgen-node-tools.git'
)

while getopts hdgGp:sST OPT
do
	case "$OPT" in
	h)  printf "  %-16s Upgrade an MMGen installation\n" "${PROGNAME^^}:"
		echo   "  USAGE:           $PROGNAME"
		echo   "  OPTIONS:"
		echo   "    '-h'   Print this help message"
		echo   "    '-d'   Generate internal documentation from wikis and exit"
		echo   "    '-g'   Update git repository only; don't run upgrade scripts"
		echo   "    '-G'   Don't update git repository; run upgrade scripts only"
		echo   "    '-p h' Connect via proxy 'p' (protocol://host:port)"
		echo   "    '-s'   Skip authentication of commits"
		echo   "    '-S'   Skip verification of PGP signatures"
		echo   "    '-T'   Connect via Tor (through privoxy)"
		exit ;;
	d)  GEN_DOCS=1 ;;
	g)  GIT_UPDATE_ONLY=1 ;;
	G)  ONLINE= ;;
	p)  PROXY=$OPTARG
		PIP="$PIP --proxy=$OPTARG"
		CURL="$CURL -x $OPTARG"
		GIT="all_proxy=$OPTARG $GIT"
		APT_GET="https_proxy=$OPTARG http_proxy=$OPTARG $APT_GET"
		BUILD_SYSTEM="$BUILD_SYSTEM -P $OPTARG"
		LYNX="https_proxy=$OPTARG http_proxy=$OPTARG $LYNX" ;;
	s)  SKIP_COMMIT_AUTH=1 ;;
	s)  SKIP_PGP_VERIFY=1 ;;
	T)  TOR='localhost:9050'
		PIP="$PIP --proxy=$PRIVOXY"
		CURL="$CURL -x $PRIVOXY"
		GIT="all_proxy=$PRIVOXY $GIT"
		APT_GET="https_proxy=$PRIVOXY http_proxy=$PRIVOXY $APT_GET"
		BUILD_SYSTEM="$BUILD_SYSTEM -P $PRIVOXY"
		LYNX="https_proxy=$PRIVOXY http_proxy=$PRIVOXY $LYNX" ;;
	*)  exit ;;
	esac
done

ARGV="$@"
shift $((OPTIND-1))

export ONLINE PIP CURL GIT APT_GET LYNX BUILD_SYSTEM REPO_ROOT
[ "$REEXEC" ] || {
	[ "$PROXY" ] && echo "Connecting via proxy $PROXY"
	[ "$TOR" ] && echo "Connecting via Tor ($TOR) over privoxy ($PRIVOXY)"
}

. ~/scripts/include/functions.sh

export RED YELLOW GREEN BLUE RESET

gpg_verify() {
	[ "$SKIP_PGP_VERIFY" ] && return 0
	echo -n "Verifying signature on '$2'..."
	set +e
	out=$($GPG --verify $1 $2 2>/dev/null) # 1:signature 2:signed file
	[ $? == 0 ] || { echo 'FAILED'; exit; }
	set -e
	echo "OK"
}

version_ge() {
	H=$(echo -e "$MY_VER$MY_REV\n$1" | sort -V | head -n1)
	[ "$H" == "$1" ] && return 0
	return 1
}

init_vars() {
	MY_VER=$(cat $HOME/var/version)
	DIR="$HOME/var/$MY_VER"

	if [ ! -d "$DIR" ]; then # begin R8
		mkdir -p "$DIR"
		FILES="$(ls $HOME/var/upgrade* $HOME/var/revision* 2>/dev/null)"
		[ "$FILES" ] && { echo 'Relocating revision and upgrade files'; mv -f $FILES $DIR; }
	fi
	mv -f $DIR/revision.my $DIR/revision 2>/dev/null || true
	rm -rf $DIR/revision.* # end R8

	MY_REV=$(cat $DIR/revision) # empty string for revision 0
	[ "$REEXEC" ] || gmsg "Version $MY_VER, revision '$MY_REV'"

	GPG='gpg --quiet --trust-model always'
}

gen_docs() {
	(
		echo "Generating documentation from $1"
		cd ${REPOS['sys']% *}
		sudo ./build_system.sh setup_sh_usb_create_docs 'IN_MMLIVE_SYSTEM=1'
	)
}

verify_commit() {
	git verify-commit $1 2>/dev/null || {
		echo "Unable to verify latest commit for repo '$2'. Aborting"
		exit 1
	}
	echo 'Signature on latest commit OK'
}

python_install() {
	(
		echo "Installing python repository '$1'"
		cd $1
		sudo python ./setup.py install
	)
}

git_update() {
	echo 'Updating git repositories'
	for repo in 'sys' 'mmgen_wiki' 'mmlive_wiki' 'tools'; do
		repo_dir=${REPOS[$repo]% *} repo_url=${REPOS[$repo]##* }
		[ -d $repo_dir ] || mkdir -p $repo_dir || { echo "Could not create '$repo_dir'"; exit; } # R8
		cd $repo_dir
		gecho "Checking $repo_url"
		cloned=
		[ -d '.git' ] || { eval "$GIT clone $repo_url ."; cloned=1; }
		cur_branch=$(git branch --color=never | grep '*' | awk '{ print $2 }')
		git checkout -q master
		OLD_LAST_COMMIT=$(git log --oneline --color=never --no-merges --pretty=%h | head -n1)
		eval "$GIT pull --no-edit --force --strategy=recursive --strategy-option=theirs" # DEBUG
		LAST_COMMIT=$(git log --oneline --color=never --no-merges --pretty=%h | head -n1)
		[ "$OLD_LAST_COMMIT" == "$LAST_COMMIT" -o "$cloned" ] || {
			[ "$SKIP_COMMIT_AUTH" ] || verify_commit $LAST_COMMIT $repo
			[ "${repo: -4}" == 'wiki' ] && gen_docs $repo
			[ "${repo: -5}" == 'tools' ] && version_ge '0.0.7f' && python_install $repo_dir
		}
		git checkout -q $cur_branch
	done
}

do_version_upgrade() {
	cd "${REPOS['sys']%% *}/upgrade"
	ver=$(cat version)
	if [ "$ver" != "$MY_VER" ]; then
		yecho "Your version of MMGenLive ($MY_VER) is outdated!"
		yecho "Please download the latest version ($ver) from the MMGenLive project page"
	fi
	scripts=$(for s in $MY_VER/upgrade-?.sh; do s=${s#*upgrade-} s=${s%.sh}; echo -n " $s"; done)
	printf "Target revision: '%s'\n" $(echo $scripts | sed 's/.* //')
	for s in $scripts; do
		if [ $s '>' "$MY_REV" ]; then
			script="$MY_VER/upgrade-$s.sh"
			echo "Executing '$script'"
			set +e
			bash $script || { recho "Execution of script '$script' failed"; exit; }
			set -e
			echo $s > "$DIR/revision"
			MY_REV=$(cat $DIR/revision)
			bmsg "Upgraded to revision '$MY_REV'"
		fi
	done
	echo 'System is up-to-date'
}

expand_partition_maybe() {
	usb_system_running || return 0
	[ -e ~/.partition_expanded ] && return 0
	gecho 'Expanding root partition on USB drive'
	mmlive-expand-partition && touch ~/.partition_expanded
}

upgrade_bitcoind_maybe() {
	COIN='BTC'
	daemon_upgrade_set_vars
	daemon_test_installed && return 0
	daemon_upgrade
}

upgrade_mmgen_maybe() {
	target_ver=$(cat $REPO_ROOT/upgrade/$MY_VER/ver_mmgen)
	installed_ver=$(mmgen-tool --version | head -n1 | awk '{print $NF}')
	[ "$target_ver" == "$installed_ver" ] && return 0
	gecho "Upgrading MMGen to version '$target_ver'"
	(
		cd $REPO_ROOT
		cmd='chroot_install_mmgen_user_at_commit'
		eval "$BUILD_SYSTEM $cmd 'IN_MMLIVE_SYSTEM=1' 'MMGEN_COMMIT=v$target_ver'"
	)
}

# begin execution:
init_vars

which privoxy >/dev/null || bash $REPO_ROOT/upgrade/$MY_VER/upgrade-c.sh # R8

[ "$GEN_DOCS" -o ! -f ~/README ] && gen_docs 'Wikis'
[ "$GEN_DOCS" ] && exit

[ "$ONLINE" -a ! "$REEXEC" ] && {
	git_update
	# script may have changed, so re-exec with original args, skipping git update
	exec $0 --reexec $ARGV
}

[ "$GIT_UPDATE_ONLY" ] || {
	expand_partition_maybe
	upgrade_bitcoind_maybe
	upgrade_mmgen_maybe
	do_version_upgrade
}
