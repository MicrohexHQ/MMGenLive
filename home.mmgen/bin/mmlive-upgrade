#!/bin/bash

set -e

[ "$EUID" == 0 ] && { echo 'This script must be run as user, not as root'; exit 1; }

PROGNAME=$(basename $0)
CURL='curl -s -L'
URL_BASE='https://github.com/mmgen/MMGenLive/releases/download'
PROJ_NAME='MMLiveUpgrade'

while getopts hT OPT
do
	case "$OPT" in
	h)  printf "  %-16s Upgrade an MMGen installation\n" "${PROGNAME^^}:"
		echo   "  USAGE:           $PROGNAME"
		echo   "  OPTIONS:   '-h'   Print this help message"
		echo   "             '-T'   Connect via Tor proxy on localhost"
		exit ;;
	T) TOR=1 CURL='curl -s -L -x socks5h://localhost:9050' ;;
	*)  exit ;;
	esac
done

shift $((OPTIND-1))

. ~/scripts/include/functions.sh

MY_VER=$(cat $HOME/var/version)
DIR="$HOME/var/$MY_VER"

if [ ! -d "$DIR" ]; then
	mkdir -p "$DIR"
	FILES="$(ls $HOME/var/upgrade* $HOME/var/revision* 2>/dev/null)"
	[ "$FILES" ] && { echo 'Relocating revision and upgrade files'; mv -f $FILES $DIR; }
fi

MY_REV=$(cat $DIR/revision.my)
gmsg "Version $MY_VER, revision '$MY_REV'"

URL="$URL_BASE/revisions-v$MY_VER"
REVS='0abcdefghijklmnopqrstuvwxyz'
GPG='gpg --quiet --trust-model always'

GIT_DIR='/setup/git/MMGenLive'

if [ -d "$GIT_DIR" ]; then
	echo 'Updating MMGenLive git repository'
	(
		cd $GIT_DIR
		git pull --no-edit --force --strategy=recursive --strategy-option=theirs
		LAST_COMMIT=$(git log --oneline --color=never --no-merges --pretty=%h | head -n1)
		git verify-commit $LAST_COMMIT 2>/dev/null || {
			echo 'Unable to verify latest commit. Aborting'
			exit 1
		}
		echo 'Signature on latest commit OK'
	)
fi

echo -e "Getting latest revision:\n$URL/revision"

eval "$CURL -O $URL/revision"
CUR_REV=$(cat $DIR/revision)

eval "$CURL -O $URL/revision.sig"
eval "$GPG --verify $DIR/revision.sig $DIR/revision"

while [ 1 ]; do
	if [ "$MY_REV" == "$CUR_REV" ]; then
		echo 'Installation is up to date'; exit
	else
		echo "current revision '$MY_REV', target revision '$CUR_REV'"
	fi
	NEXT_REV=${REVS#*$MY_REV} NEXT_REV=${NEXT_REV:0:1}
	SCRIPT="upgrade-$NEXT_REV.sh"

	gmsg "Downloading upgrade script for revision '$NEXT_REV'"
	eval "$CURL -o $DIR/$SCRIPT $URL/$SCRIPT"

	eval "$CURL -o $DIR/$SCRIPT.sig $URL/$SCRIPT.sig"
	eval "$GPG --verify $DIR/$SCRIPT.sig $DIR/$SCRIPT"

	[ -s "$DIR/$SCRIPT" ] || { echo "Download of script failed"; exit; }
	gmsg "Running upgrade script"
	set +e
	/bin/bash $DIR/$SCRIPT || { rmsg "Upgrade script for revision '$NEXT_REV' failed"; exit; }
	set -e
	echo $NEXT_REV > "$DIR/revision.my"
	MY_REV=$(cat $DIR/revision.my)
	bmsg "Upgraded to revision '$MY_REV'"
done
